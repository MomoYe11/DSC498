plot(ran_roc, print.auc=TRUE, auc.polygon=TRUE, grid=c(0.1, 0.2),grid.col=c("green", "red"), max.auc.polygon=TRUE,auc.polygon.col="skyblue", print.thres=TRUE,main='随机森林模型ROC曲线,mtry=3,ntree=500')
roc<-multiclass.roc (as.ordered(testdata$aqil),as.ordered(hb_pred))
plot(roc, print.auc=TRUE, auc.polygon=TRUE, grid=c(0.1, 0.2),grid.col=c("green", "red"), max.auc.polygon=TRUE,auc.polygon.col="skyblue", print.thres=TRUE,main='随机森林模型ROC曲线,mtry=3,ntree=500')
plot(roc, print.auc=TRUE, auc.polygon=TRUE, grid=c(0.1, 0.2),grid.col=c("green", "red"), max.auc.polygon=TRUE,auc.polygon.col="skyblue", print.thres=TRUE,main='Random forest ROC curve,mtry=3,ntree=500')
plot(ran_roc, print.auc=TRUE, auc.polygon=TRUE, grid=c(0.1, 0.2),grid.col=c("green", "red"), max.auc.polygon=TRUE,auc.polygon.col="skyblue", print.thres=TRUE,main='Random forest ROC curve,mtry=3,ntree=500')
ran_roc <- roc(testdata$aqil,as.numeric(hb_pred))
ran_roc <- multiclass.roc(testdata$aqil,as.numeric(hb_pred))
plot(ran_roc, print.auc=TRUE, auc.polygon=TRUE, grid=c(0.1, 0.2),grid.col=c("green", "red"), max.auc.polygon=TRUE,auc.polygon.col="skyblue", print.thres=TRUE,main='Random forest ROC curve,mtry=3,ntree=500')
hb_tree
print(hb_tree)
hb_tree<- randomForest(as.factor(traindata[,"aqil"])~., data=traindata, ntree=800,mtry=3,important=TRUE)
print(hb_tree)
hb_tree<- randomForest(as.factor(traindata[,"aqil"])~., data=traindata, mtry=3,important=TRUE)
print(hb_tree)
hb_tree2<- randomForest(aqi~., data=traindata1, mtry=3,important=TRUE)
hb_tree2
hb_tree2$importance
varImpPlot(hb_tree2, main = "variable importance")
hb_tree$importance
print(hb_tree)
hb_tree$importance
varImpPlot(hb_tree, main = "variable importance")
hb_tree2
hb_tree2<- randomForest(aqi~., data=traindata1, mtry=3,important=TRUE,na.action=na.omit)
hb_tree2
pred_out_1<-predict(object=hb_tree,newdata=testdata,type="prob")
View(pred_out_1)
table <- table(hb_pred,testdata$aqil)
sum(diag(table))/sum(table)
plot(margin(hb_pred,testdata$aqil),main= "probability plot")
plot(margin(hb_pred,testdata$aqil),main= probability plot)
plot.margin(hb_pred,testdata$aqil),main= "probability plot")
plot.margin((hb_pred,testdata$aqil),main= "probability plot")
plot.margin((hb_pred,testdata$aqil) main= "probability plot")
plot(margin(hb_pred,testdata$aqil),main=观测值被判断正确的概率图)
sum(diag(table))/sum(table)
traindata <- as.data.frame(traindata)
set.seed(1234)
hb_tree<- randomForest(as.factor(traindata[,"aqil"])~., data=traindata, mtry=3,important=TRUE)
print(hb_tree)
# feature selection
install.packages("Boruta")
library(Boruta)
str(HB3)
names(HB3)
names(HB3)<- gsub("_", "", names(HB3))
names(HB3)
HB3=na.omit(HB3)
set.seed(123)
boruta.train <- Boruta(aqi~., data = group2, doTrace = 2)
print(boruta.train)
plot(boruta.train, xlab = "", xaxt = "n")
lz<-lapply(1:ncol(boruta.train$ImpHistory),function(i)
boruta.train$ImpHistory[is.finite(boruta.train$ImpHistory[,i]),i])
names(lz) <- colnames(boruta.train$ImpHistory)
Labels <- sort(sapply(lz,median))
axis(side = 1,las=2,labels = names(Labels),
at = 1:ncol(boruta.train$ImpHistory), cex.axis = 0.7)
lmrenjun<-lm(aqi~.-Coke.consuption,-Coal.consuption,data=renjun)
summary(lmrenjun)
lmrenjun<-lm(aqi~.-Coke.consuption+Coal.consuption,data=renjun)
summary(lmrenjun)
lmrenjun<-lm(aqi~.-Coke.consuption.-Coal.consuption,data=renjun)
lmrenjun<-lm(aqi~.-Coke.consuption -Coal.consuption,data=renjun)
summary(lmrenjun)
lmrenjun<-lm(aqi~.-Coke.consuption -Coal.consuption -Crude.oil.consumption -Netural.gas.consumption,data=renjun)
summary(lmrenjun)
group2=na.omit(group2)
lmgroup2<-lm(aqi~.,data = group2)
group2=na.omit(group2)
lmgroup2<-lm(aqi~.-Coke.consuption -Coal.consuption -Crude.oil.consumption -Netural.gas.consumption,data = group2)
summary(lmgroup2)
index2 <- sample(2,nrow(group2),replace = TRUE,prob=c(0.7,0.3))
traindata1 <- group2[index2==1,]
testdata1 <- group2[index2==2,]
group2_pred<-predict(lmgroup2, newdata=testdata1)
table(group2_pred,testdata1$aqi)
obs_p_reg = data.frame(prob=group2_pred,obs=testdata1$aqi)
mse_reg = (obs_p_reg$obs-obs_p_reg$prob)**2/length(obs_p_reg$prob)
plot(mse_reg,type="o")
View(obs_p_reg)
roc<-multiclass.roc (as.ordered(testdata$aqil),as.ordered(hb_pred))
roc #0.966
plot(ran_roc, print.auc=TRUE, auc.polygon=TRUE, grid=c(0.1, 0.2),grid.col=c("green", "red"), max.auc.polygon=TRUE,auc.polygon.col="skyblue", print.thres=TRUE,main='Random forest ROC curve,mtry=3,ntree=500')
# random forest
#classify
HB3=na.omit(HB3)
index <- sample(2,nrow(HB3),replace = TRUE,prob=c(0.7,0.3))
traindata <- HB3[index==1,]
testdata <- HB3[index==2,]
traindata <- as.data.frame(traindata)
set.seed(1234)
hb_tree<- randomForest(as.factor(traindata[,"aqil"])~., data=traindata, mtry=3,important=TRUE)
print(hb_tree)
hb_tree$importance
varImpPlot(hb_tree, main = "variable importance")
hb_pred<-predict(hb_tree, newdata=testdata)
pred_out_1<-predict(object=hb_tree,newdata=testdata,type="prob")
table <- table(hb_pred,testdata$aqil)
sum(diag(table))/sum(table)
plot(margin(hb_pred,testdata$aqil),main=观测值被判断正确的概率图)
table(hb_pred,testdata$aqil)
obs_p_ran = data.frame(prob=hb_pred,obs=testdata$aqil)
ran_roc <- roc(testdata$aqil,as.numeric(hb_pred))
roc<-multiclass.roc (as.ordered(testdata$aqil),as.ordered(hb_pred))
roc #0.966
plot(ran_roc, print.auc=TRUE, auc.polygon=TRUE, grid=c(0.1, 0.2),grid.col=c("green", "red"), max.auc.polygon=TRUE,auc.polygon.col="skyblue", print.thres=TRUE,main='Random forest ROC curve,mtry=3,ntree=500')
library(tidyverse)
library(glmnet)
install.packages("glmnet")
library(glmnet)
library(sigFeature)
install.packages("sigFeature")
library(sigFeature)
library(e1071)
library(caret)
install.packages("caret")
library(caret)
folds<-createFolds(y=traindata[,1],k=5)
max=0
num=0
fc<-as.numeric()
mod_pre<-as.numeric()
for(i in 1:5){
fold_test<-train[folds[[i]],]
fold_train<-train[-folds[[i]],]
model<-svm(as.factor(aqil)~.,data=traindata)
model_pre<-predict(model,newdata = fold_test)
fc<-append(fc,as.numeric(as.character(fold_test$aqil)))
mod_pre<-append(mod_pre,as.numeric(as.character(model_pre)))
}
df<-cbind(fc,mod_pre)
View(df)
library(pROC)
library(ROCR)
install.packages("ROCR")
library(ROCR)
control = trainControl(method = "repaetedcv",
number = 10,
repeats =3,
classProbs = TRUE,
summaryFunction = twoClassSummary)
library(e1071)
library(tidyverse)
library(glmnet)
library(caret)
library(ROCR)
control = trainControl(method = "repaetedcv",
number = 10,
repeats =3,
classProbs = TRUE,
summaryFunction = twoClassSummary)
svm.model = train(churn ~ .,
data= traindata,
method = "svmRadial",
metric = "ROC",
trControl = control)
svm.model = train(aqil ~ .,
data= traindata,
method = "svmRadial",
metric = "ROC",
trControl = control)
svm.model = train(aqil ~ .,
data= traindata,
method = "svmRadial",
metric = "ROC",
trControl = control)
svm.model = train(as.factor(aqil) ~ .,
data= traindata,
method = "svmRadial",
metric = "ROC",
trControl = control)
View(traindata)
svm.model = train(as.factor(traindata[,"aqil"])~.,
data= traindata,
method = "svmRadial",
metric = "ROC",
trControl = control)
svm.model = train(make.names(aqil) ~ .,
data= traindata,
method = "svmRadial",
metric = "ROC",
trControl = control)
control = trainControl(method = "repaetedcv",
number = 10,
repeats =3,
classProbs = TRUE,
summaryFunction = twoClassSummary)
svm.model = train(aqil ~ .,
data= traindata,
method = "svmRadial",
metric = "ROC",
trControl = control)
control = trainControl(method = "repeatedcv",
number = 10,
repeats =3,
classProbs = TRUE,
summaryFunction = twoClassSummary)
svm.model = train(aqil ~ .,
data= traindata,
method = "svmRadial",
metric = "ROC",
trControl = control)
svm.model = train(as.factor(aqil) ~ .,
data= traindata,
method = "svmRadial",
metric = "ROC",
trControl = control)
svm.model = train(make.names(aqil) ~ .,
data= traindata,
method = "svmRadial",
metric = "ROC",
trControl = control)
control = trainControl(method = "repeatedcv",
number = 10,
repeats =3,
classProbs = TRUE,
)
svm.model = train(make.names(aqil) ~ .,
data= traindata,
method = "svmRadial",
metric = "ROC",
trControl = control)
View(svm.model)
control = trainControl(method = "repeatedcv",
number = 10,
repeats =3,
classProbs = TRUE,
summaryFunction = twoClassSummary
)
control = trainControl(method = "repeatedcv",
number = 10,
repeats =3,
classProbs = TRUE,
summaryFunction = twoClassSummary
)
control = trainControl(method = "repeatedcv",
number = 10,
repeats =3,
classProbs = TRUE,
summaryFunction = twoClassSummary
)
svm.model = train(make.names(aqil) ~ .,
data= traindata,
method = "svmRadial",
metric = "ROC",
trControl = control)
control = trainControl(method = "repeatedcv",
number = 10,
repeats =3,
classProbs = TRUE,
summaryFunction = multiClassSummary
)
svm.model = train(make.names(aqil) ~ .,
data= traindata,
method = "svmRadial",
metric = "ROC",
trControl = control)
install.packages("MLmetrics")
library(MLmetrics)
control = trainControl(method = "repeatedcv",
number = 10,
repeats =3,
classProbs = TRUE,
summaryFunction = multiClassSummary
)
svm.model = train(make.names(aqil) ~ .,
data= traindata,
method = "svmRadial",
metric = "ROC",
trControl = control)
rf.model = train(make.names(aqil) ~ .,
data= traindata,
method = "rf",
metric = "ROC",
trControl = control)
svm.probs = predict(svm.model,testdata[,!names(testdata) %in% c("aqil")],type = "prob")
rf.probs = predict(rf.model,testdata[,!names(testdata) %in% c("aqil")],type = "prob")
svm.ROC = roc(response = testdata[,c("aqil")],
predictor = svm.probs$yes,
levels = levels(testdata[,c("aqil")]))
plot(svm.ROC,add = TRUE,col = "green")
control = trainControl(method = "repeatedcv",
number = 10,
repeats =3,
classProbs = TRUE,
)
svm.model = train(make.names(aqil) ~ .,
data= traindata,
method = "svmRadial",
metric = "ROC",
trControl = control)
svm.Accuracy = Accuracy(response = testdata[,c("aqil")],
predictor = svm.probs$yes,
levels = levels(testdata[,c("aqil")]))
library(corrplot)
#corrplot
rquery.cormat(group2)
rquery.cormat<-function(x,
type=c('lower', 'upper', 'full', 'flatten'),
graph=TRUE,
graphType=c("correlogram", "heatmap"),
col=NULL, ...)
{
library(corrplot)
# Helper functions
#+++++++++++++++++
# Compute the matrix of correlation p-values
cor.pmat <- function(x, ...) {
mat <- as.matrix(x)
n <- ncol(mat)
p.mat<- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], ...)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
# Get lower triangle of the matrix
getLower.tri<-function(mat){
upper<-mat
upper[upper.tri(mat)]<-""
mat<-as.data.frame(upper)
mat
}
# Get upper triangle of the matrix
getUpper.tri<-function(mat){
lt<-mat
lt[lower.tri(mat)]<-""
mat<-as.data.frame(lt)
mat
}
# Get flatten matrix
flattenCorrMatrix <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut]
)
}
# Define color
if (is.null(col)) {
col <- colorRampPalette(
c("#67001F", "#B2182B", "#D6604D", "#F4A582",
"#FDDBC7", "#FFFFFF", "#D1E5F0", "#92C5DE",
"#4393C3", "#2166AC", "#053061"))(200)
col<-rev(col)
}
# Correlation matrix
cormat<-signif(cor(x, use = "complete.obs", ...),2)
pmat<-signif(cor.pmat(x, ...),2)
# Reorder correlation matrix
ord<-corrMatOrder(cormat, order="hclust")
cormat<-cormat[ord, ord]
pmat<-pmat[ord, ord]
# Replace correlation coeff by symbols
sym<-symnum(cormat, abbr.colnames=FALSE)
# Correlogram
if(graph & graphType[1]=="correlogram"){
corrplot(cormat, type=ifelse(type[1]=="flatten", "lower", type[1]),
tl.col="black", tl.srt=45,col=col,...)
}
else if(graphType[1]=="heatmap")
heatmap(cormat, col=col, symm=TRUE)
# Get lower/upper triangle
if(type[1]=="lower"){
cormat<-getLower.tri(cormat)
pmat<-getLower.tri(pmat)
}
else if(type[1]=="upper"){
cormat<-getUpper.tri(cormat)
pmat<-getUpper.tri(pmat)
sym=t(sym)
}
else if(type[1]=="flatten"){
cormat<-flattenCorrMatrix(cormat, pmat)
pmat=NULL
sym=NULL
}
list(r=cormat, p=pmat, sym=sym)
}
#corrplot
rquery.cormat(group2)
group2=na.omit(group2)
#corrplot
rquery.cormat(group2)
#corrplot
rquery.cormat(group2,type="full")
str(group2)
names(group2)<- gsub("_", "", names(group2))
group2=na.omit(group2)
set.seed(123)
boruta.train <- Boruta(aqi~., data = group2, doTrace = 2)
print(boruta.train)
print(boruta.train)
plot(boruta.train, xlab = "", xaxt = "n")
lz<-lapply(1:ncol(boruta.train$ImpHistory),function(i)
boruta.train$ImpHistory[is.finite(boruta.train$ImpHistory[,i]),i])
names(lz) <- colnames(boruta.train$ImpHistory)
Labels <- sort(sapply(lz,median))
axis(side = 1,las=2,labels = names(Labels),
at = 1:ncol(boruta.train$ImpHistory), cex.axis = 0.7)
View(obs_p_ran)
train_sub = sample(nrow(HB3),7/10*nrow(HB3))
train_data = HB3[train_sub,]
test_data = HB3[-train_sub,]
train_data$aqiL = as.factor(train_data$aqil)
test_data$aqiL = as.factor(test_data$aqil)
HB_svm<- svm(aqiL~.,data=train_data,type = 'C',kernel = 'radial')
pre_svm <- predict(HB_svm,newdata = test_data)
obs_p_svm = data.frame(pred=pre_svm,obs=test_data$aqil)
hb_pred<-predict(hb_tree, newdata=testdata)
pred_out_1<-predict(object=hb_tree,newdata=testdata,type="prob")
table <- table(hb_pred,testdata$aqil)
sum(diag(table))/sum(table)
plot(margin(hb_pred,testdata$aqil),main=观测值被判断正确的概率图)
table(hb_pred,testdata$aqil)
obs_p_ran = data.frame(preb=hb_pred,obs=testdata$aqil)
ran_roc <- roc(testdata$aqil,as.numeric(hb_pred))
roc<-multiclass.roc (as.ordered(testdata$aqil),as.ordered(hb_pred))
roc #0.966
View(obs_p_ran)
View(obs_p_svm)
hb_pred<-predict(hb_tree, newdata=testdata)
pred_out_1<-predict(object=hb_tree,newdata=testdata,type="prob")
table <- table(hb_pred,testdata$aqil)
sum(diag(table))/sum(table)
obs_p_ran = data.frame(preb=hb_pred,obs=testdata$aqil)
ran_roc <- roc(testdata$aqil,as.numeric(hb_pred))
traindata <- as.data.frame(traindata)
set.seed(1234)
hb_tree<- randomForest(as.factor(traindata[,"aqil"])~., data=traindata, mtry=3,important=TRUE)
print(hb_tree)
train_sub = sample(nrow(HB3),7/10*nrow(HB3))
train_data = HB3[train_sub,]
test_data = HB3[-train_sub,]
train_data$aqiL = as.factor(train_data$aqil)
test_data$aqiL = as.factor(test_data$aqil)
HB_svm<- svm(aqiL~.,data=train_data,type = 'C',kernel = 'radial')
pre_svm <- predict(HB_svm,newdata = test_data)
obs_p_svm = data.frame(pred=pre_svm,obs=test_data$aqil)
table(test_data$aqil,pre_svm,dnn=c("true value","predict value"))
train_data$aqiL = as.factor(traindata$aqil)
traindata$aqiL = as.factor(traindata$aqil)
testdata$aqiL = as.factor(testdata$aqil)
HB_svm<- svm(aqiL~.,data=traindata,type = 'C',kernel = 'radial')
pre_svm <- predict(HB_svm,newdata = testdata)
obs_p_svm = data.frame(pred=pre_svm,obs=testdata$aqil)
table(test_data$aqil,pre_svm,dnn=c("true value","predict value"))
table(testdata$aqil,pre_svm,dnn=c("true value","predict value"))
roc<-multiclass.roc (as.ordered(test_data$aqil),as.ordered(pre_svm))
roc   #0.8333
traindata$aqiL = as.factor(traindata$aqil)
testdata$aqiL = as.factor(testdata$aqil)
HB_svm<- svm(aqiL~.,data=traindata,type = 'C',kernel = 'radial')
pre_svm <- predict(HB_svm,newdata = testdata)
obs_p_svm = data.frame(pred=pre_svm,obs=testdata$aqil)
table(testdata$aqil,pre_svm,dnn=c("true value","predict value"))
traindata <- as.data.frame(traindata)
set.seed(1234)
hb_tree<- randomForest(as.factor(traindata[,"aqil"])~., data=traindata, mtry=3,important=TRUE)
print(hb_tree)
hb_tree2<- randomForest(aqi~., data=traindata1, mtry=3,important=TRUE,na.action=na.omit)
hb_tree2
hb_tree2$importance
varImpPlot(hb_tree2, main = "variable importance")
hb_tree2<- randomForest(aqi~., data=traindata1, mtry=3,important=TRUE,na.action=na.omit)
hb_tree2
hb_tree2$importance
varImpPlot(hb_tree2, main = "variable importance")
print(hb_tree)
print(HB_svm)
table(testdata$aqil,pre_svm,dnn=c("true value","predict value"))
table(hb_pred,testdata$aqil)
# regression
lmgroup<-lm(aqi~.,data = group1)
summary(lmgroup)
lmrenjun<-lm(aqi~.-Coke.consuption -Coal.consuption -Crude.oil.consumption -Netural.gas.consumption,data=renjun)
summary(lmrenjun)
group2=na.omit(group2)
lmgroup2<-lm(aqi~.-Coke.consuption -Coal.consuption -Crude.oil.consumption -Netural.gas.consumption,data = group2)
summary(lmgroup2)
index2 <- sample(2,nrow(group2),replace = TRUE,prob=c(0.7,0.3))
traindata1 <- group2[index2==1,]
testdata1 <- group2[index2==2,]
group2_pred<-predict(lmgroup2, newdata=testdata1)
table(group2_pred,testdata1$aqi)
obs_p_reg = data.frame(prob=group2_pred,obs=testdata1$aqi)
mse_reg = (obs_p_reg$obs-obs_p_reg$prob)**2/length(obs_p_reg$prob)
plot(mse_reg,type="o")
View(obs_p_reg)
plot(obs_p_reg)
plot(obs_p_reg,type="o")
obs_p_reg = data.frame(pred=group2_pred,obs=testdata1$aqi)
mse_reg = (obs_p_reg$obs-obs_p_reg$prob)**2/length(obs_p_reg$prob)
qplot(obs_p_reg$pred, obs_p_reg$obs) + geom_line()
p = ggplot() + geom_line(data = obs_p_reg$pred, color="blue") + geom_line(data=obs_p_reg$obs, color="red")
print(p)
hb_tree2<- randomForest(aqi~., data=traindata1, mtry=3,important=TRUE,na.action=na.omit)
hb_tree2
hb_tree2$importance
varImpPlot(hb_tree2, main = "variable importance")
a
a=sd(0.93)
a
hb_pred
